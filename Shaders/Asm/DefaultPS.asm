//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbPerObject
// {
//
//   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
//   float4x4 gTexTransform;            // Offset:   64 Size:    64 [unused]
//   uint gMaterialIndex;               // Offset:  128 Size:     4
//   uint gObjPad0;                     // Offset:  132 Size:     4 [unused]
//   uint gObjPad1;                     // Offset:  136 Size:     4 [unused]
//   uint gObjPad2;                     // Offset:  140 Size:     4 [unused]
//
// }
//
// cbuffer cbPass
// {
//
//   float4x4 gView;                    // Offset:    0 Size:    64 [unused]
//   float4x4 gInvView;                 // Offset:   64 Size:    64 [unused]
//   float4x4 gProj;                    // Offset:  128 Size:    64 [unused]
//   float4x4 gInvProj;                 // Offset:  192 Size:    64 [unused]
//   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
//   float4x4 gInvViewProj;             // Offset:  320 Size:    64 [unused]
//   float3 gEyePosWS;                  // Offset:  384 Size:    12
//   float cbPerObjectPad1;             // Offset:  396 Size:     4 [unused]
//   float2 gRenderTargetSize;          // Offset:  400 Size:     8 [unused]
//   float2 gInvRenderTargetSize;       // Offset:  408 Size:     8 [unused]
//   float gNearZ;                      // Offset:  416 Size:     4 [unused]
//   float gFarZ;                       // Offset:  420 Size:     4 [unused]
//   float gTotalTime;                  // Offset:  424 Size:     4 [unused]
//   float gDeltaTime;                  // Offset:  428 Size:     4 [unused]
//   float4 gAmbientLight;              // Offset:  432 Size:    16
//   
//   struct Light
//   {
//       
//       float3 Strength;               // Offset:  448
//       float FalloffStart;            // Offset:  460
//       float3 Direction;              // Offset:  464
//       float FalloffEnd;              // Offset:  476
//       float3 Position;               // Offset:  480
//       float SpotPower;               // Offset:  492
//
//   } gLights[16];                     // Offset:  448 Size:   768
//   float4x4 gShadowView;              // Offset: 1216 Size:    64 [unused]
//   float gMaxBorderPadding;           // Offset: 1280 Size:     4 [unused]
//   float gMinBorderPadding;           // Offset: 1284 Size:     4 [unused]
//   float gCascadeBlendArea;           // Offset: 1288 Size:     4 [unused]
//   float cbPerObjectPad0;             // Offset: 1292 Size:     4 [unused]
//   float4 gShadowBias;                // Offset: 1296 Size:    16
//   float4 gShadowTexScale[3];         // Offset: 1312 Size:    48
//   float4 gShadowTexOffset[3];        // Offset: 1360 Size:    48
//   int gPCFBlurForLoopStart;          // Offset: 1408 Size:     4
//   int gPCFBlurForLoopEnd;            // Offset: 1412 Size:     4
//   int cbPerObjectPad2;               // Offset: 1416 Size:     4 [unused]
//   int cbPerObjectPad3;               // Offset: 1420 Size:     4 [unused]
//   bool gVisualCascade;               // Offset: 1424 Size:     4
//   bool gBlendCascade;                // Offset: 1428 Size:     4 [unused]
//   bool cbPerObjectPad5;              // Offset: 1432 Size:     4 [unused]
//   bool cbPerObjectPad6;              // Offset: 1436 Size:     4 [unused]
//   float4 gCascadeFrustumsEyeSpaceDepthsFloat;// Offset: 1440 Size:    16
//   float4 gCascadeFrustumsEyeSpaceDepthsFloat4[3];// Offset: 1456 Size:    48 [unused]
//
// }
//
// Resource bind info for gMaterialData
// {
//
//   struct MaterialData
//   {
//       
//       float4 DiffuseAlbedo;          // Offset:    0
//       float4 CubeMapDiffuseAlbedo;   // Offset:   16
//       float3 FresnelR0;              // Offset:   32
//       float Roughness;               // Offset:   44
//       float4x4 MatTransform;         // Offset:   48
//       uint DiffuseMapIndex;          // Offset:  112
//       uint NormalMapIndex;           // Offset:  116
//       uint HeightMapIndex;           // Offset:  120
//       int BitangentSign;             // Offset:  124
//       uint UseACForPOM;              // Offset:  128
//       uint MaxSampleCount;           // Offset:  132
//       uint MinSampleCount;           // Offset:  136
//       uint CascadeDebugIndex;        // Offset:  140
//       float HeightScale;             // Offset:  144
//       float ShadowSoftening;         // Offset:  148
//       float floatPad0;               // Offset:  152
//       float floatPad1;               // Offset:  156
//       bool ShowSelfShadow;           // Offset:  160
//       bool boolPad0;                 // Offset:  164
//       bool boolPad1;                 // Offset:  168
//       bool boolPad2;                 // Offset:  172
//
//   } $Element;                        // Offset:    0 Size:   176
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      ID      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- ------- -------------- ------
// gsamLinearWrap                    sampler      NA          NA      S0             s2      1 
// gsamAnisotropicWrap               sampler      NA          NA      S1             s4      1 
// gsamShadow                      sampler_c      NA          NA      S2             s6      1 
// gCubeMap                          texture  float4        cube      T0             t0      1 
// gTextureMaps                      texture  float4          2d      T1             t1     44 
// gShadowMap                        texture  float4          2d      T2      t0,space1      3 
// gMaterialData                     texture  struct         r/o      T3      t0,space2      1 
// cbPerObject                       cbuffer      NA          NA     CB0            cb0      1 
// cbPass                            cbuffer      NA          NA     CB1            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyz         1     NONE   float   xyz 
// POSITION                 1   xyzw        2     NONE   float   xyzw
// NORMAL                   0   xyz         3     NONE   float   xyz 
// TANGENT                  0   xyz         4     NONE   float   xyz 
// TEXCOORD                 0   xy          5     NONE   float   xy  
// TEXCOORD                 1     z         5     NONE   float     z 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_1
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { 1.500000, 0, 0, 1.000000},
                              { 0, 1.500000, 0, 1.000000},
                              { 0, 0, 5.500000, 1.000000},
                              { 1.500000, 0, 5.500000, 1.000000},
                              { 1.500000, 1.500000, 0, 1.000000},
                              { 1.000000, 1.000000, 1.000000, 1.000000},
                              { 0, 1.000000, 5.500000, 1.000000},
                              { 0.500000, 3.500000, 0.750000, 1.000000} }
dcl_constantbuffer CB0[0:0][9], immediateIndexed, space=0
dcl_constantbuffer CB1[1:1][91], dynamicIndexed, space=0
dcl_sampler S0[2:2], mode_default, space=0
dcl_sampler S1[4:4], mode_default, space=0
dcl_sampler S2[6:6], mode_comparison, space=0
dcl_resource_texturecube (float,float,float,float) T0[0:0], space=0
dcl_resource_texture2d (float,float,float,float) T1[1:44], space=0
dcl_resource_texture2d (float,float,float,float) T2[0:2], space=1
dcl_resource_structured T3[0:0], 176, space=2
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xy
dcl_input_ps linear v5.z
dcl_output o0.xyzw
dcl_temps 15
ld_structured r0.xyzw, CB0[0][8].x, l(0), T3[0].xyzw
ld_structured r1.xyzw, CB0[0][8].x, l(16), T3[0].xyzw
ld_structured r2.xyzw, CB0[0][8].x, l(32), T3[0].xyzw
ld_structured r3.xy, CB0[0][8].x, l(112), T3[0].xyxx
ld_structured r3.z, CB0[0][8].x, l(124), T3[0].xxxx
dp3 r3.w, v3.xyzx, v3.xyzx
rsq r3.w, r3.w
mul r4.xyz, r3.wwww, v3.xyzx
sample r5.xyz, v5.xyxx, T1[r3.y + 1].xyzw, S1[4]
mad r5.xyz, r5.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r3.y, v4.xyzx, r4.xyzx
mad r6.xyz, -r3.yyyy, r4.xyzx, v4.xyzx
dp3 r3.y, r6.xyzx, r6.xyzx
rsq r3.y, r3.y
mul r6.xyz, r3.yyyy, r6.xyzx
mul r7.xyz, r4.zxyz, r6.yzxy
mad r7.xyz, r4.yzxy, r6.zxyz, -r7.xyzx
itof r3.y, r3.z
mul r3.yzw, r3.yyyy, -r7.xxyz
mul r3.yzw, r3.yyzw, r5.yyyy
mad r3.yzw, r5.xxxx, r6.xxyz, r3.yyzw
mad r3.yzw, r5.zzzz, r4.xxyz, r3.yyzw
sample r4.xyzw, v5.xyxx, T1[r3.x + 1].xyzw, S1[4]
mul r4.xyzw, r1.xyzw, r4.xyzw
mul r5.xyzw, r0.xyzw, r4.xyzw
add r6.xyz, -v1.xyzx, CB1[1][24].xyzx
dp3 r0.w, r6.xyzx, r6.xyzx
rsq r0.w, r0.w
mul r7.xyz, r0.wwww, r6.xyzx
add r8.xyzw, -r2.wxyz, l(1.000000, 1.000000, 1.000000, 1.000000)
max r1.w, r8.x, l(0.010000)
iadd r2.w, -CB1[1][88].x, CB1[1][88].y
itof r2.w, r2.w
mul r2.w, r2.w, r2.w
lt r9.xyz, CB1[1][90].xyzx, v5.zzzz
and r9.xyz, r9.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
dp3 r3.x, l(1.000000, 1.000000, 1.000000, 0.000000), r9.xyzx
min r3.x, r3.x, l(2.000000)
ftoi r3.x, r3.x
mad r9.xyzw, v2.xyzw, CB1[1][r3.x + 82].xyzw, CB1[1][r3.x + 85].xyzw
div r9.xyz, r9.xyzx, r9.wwww
resinfo_uint r10.xy, l(0), T2[r3.x + 0].xyzw
utof r10.xy, r10.xyxx
div r10.xy, l(1.000000, 1.000000, 1.000000, 1.000000), r10.xyxx
mov r4.w, l(0)
mov r6.w, CB1[1][88].x
loop 
  ige r7.w, r6.w, CB1[1][88].y
  breakc_nz r7.w
  itof r7.w, r6.w
  mad r11.y, r7.w, r10.y, r9.y
  mov r7.w, r4.w
  mov r8.x, CB1[1][88].x
  loop 
    ige r9.w, r8.x, CB1[1][88].y
    breakc_nz r9.w
    dp3 r9.w, CB1[1][81].xyzx, icb[r3.x + 0].xyzx
    add r9.w, -r9.w, r9.z
    itof r10.z, r8.x
    mad r11.x, r10.z, r10.x, r9.x
    sample_c_lz r9.w, r11.xyxx, T2[r3.x + 0].xxxx, S2[6], r9.w
    add r7.w, r7.w, r9.w
    iadd r8.x, r8.x, l(1)
  endloop 
  mov r4.w, r7.w
  iadd r6.w, r6.w, l(1)
endloop 
div r9.x, r4.w, r2.w
if_nz CB1[1][89].x
  mov r10.xyz, icb[r3.x + 4].xyzx
else 
  mov r10.xyz, l(1.000000,1.000000,1.000000,0)
endif 
mul r2.w, r1.w, l(256.000000)
mad r3.x, r1.w, l(256.000000), l(8.000000)
mov r9.yz, l(0,1.000000,1.000000,0)
mov r11.xyz, l(0,0,0,0)
mov r4.w, l(0)
loop 
  ige r6.w, r4.w, l(3)
  breakc_nz r6.w
  dp3 r6.w, r9.xyzx, icb[r4.w + 0].xyzx
  imul null, r7.w, r4.w, l(3)
  dp3 r8.x, -CB1[1][r7.w + 29].xyzx, -CB1[1][r7.w + 29].xyzx
  rsq r8.x, r8.x
  mul r12.xyz, r8.xxxx, -CB1[1][r7.w + 29].xyzx
  dp3 r8.x, r12.xyzx, r3.yzwy
  max r8.x, r8.x, l(0.000000)
  mul r13.xyz, r8.xxxx, CB1[1][r7.w + 28].xyzx
  mad r14.xyz, r6.xyzx, r0.wwww, r12.xyzx
  dp3 r7.w, r14.xyzx, r14.xyzx
  rsq r7.w, r7.w
  mul r14.xyz, r7.wwww, r14.xyzx
  dp3 r7.w, r14.xyzx, r3.yzwy
  max r7.w, r7.w, l(0.000000)
  log r7.w, r7.w
  mul r7.w, r2.w, r7.w
  exp r7.w, r7.w
  mul r7.w, r3.x, r7.w
  mul r7.w, r7.w, l(0.125000)
  dp3_sat r8.x, r14.xyzx, r12.xyzx
  add r8.x, -r8.x, l(1.000000)
  mul r9.w, r8.x, r8.x
  mul r9.w, r9.w, r9.w
  mul r8.x, r8.x, r9.w
  mad r12.xyz, r8.yzwy, r8.xxxx, r2.xyzx
  mul r14.xyz, r7.wwww, r12.xyzx
  mad r12.xyz, r12.xyzx, r7.wwww, l(1.000000, 1.000000, 1.000000, 0.000000)
  div r12.xyz, r14.xyzx, r12.xyzx
  mad r12.xyz, r0.xyzx, r4.xyzx, r12.xyzx
  mul r12.xyz, r13.xyzx, r12.xyzx
  mad r11.xyz, r6.wwww, r12.xyzx, r11.xyzx
  iadd r4.w, r4.w, l(1)
endloop 
mad r0.xyz, CB1[1][27].xyzx, r5.xyzx, r11.xyzx
dp3 r0.w, -r7.xyzx, r3.yzwy
add r0.w, r0.w, r0.w
mad r4.xyz, r3.yzwy, -r0.wwww, -r7.xyzx
sample r5.xyz, r4.xyzx, T0[0].xyzw, S0[2]
mul r1.xyz, r1.xyzx, r5.xyzx
dp3_sat r0.w, r3.yzwy, r4.xyzx
add r0.w, -r0.w, l(1.000000)
mul r2.w, r0.w, r0.w
mul r2.w, r2.w, r2.w
mul r0.w, r0.w, r2.w
mad r2.xyz, r8.yzwy, r0.wwww, r2.xyzx
mul r2.xyz, r1.wwww, r2.xyzx
mad r0.xyz, r2.xyzx, r1.xyzx, r0.xyzx
mul o0.xyz, r10.xyzx, r0.xyzx
mov o0.w, r5.w
ret 
// Approximately 131 instruction slots used
