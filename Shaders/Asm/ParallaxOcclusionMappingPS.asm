//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbPerObject
// {
//
//   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
//   float4x4 gTexTransform;            // Offset:   64 Size:    64 [unused]
//   uint gMaterialIndex;               // Offset:  128 Size:     4
//   uint gObjPad0;                     // Offset:  132 Size:     4 [unused]
//   uint gObjPad1;                     // Offset:  136 Size:     4 [unused]
//   uint gObjPad2;                     // Offset:  140 Size:     4 [unused]
//
// }
//
// cbuffer cbPass
// {
//
//   float4x4 gView;                    // Offset:    0 Size:    64 [unused]
//   float4x4 gInvView;                 // Offset:   64 Size:    64 [unused]
//   float4x4 gProj;                    // Offset:  128 Size:    64 [unused]
//   float4x4 gInvProj;                 // Offset:  192 Size:    64 [unused]
//   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
//   float4x4 gInvViewProj;             // Offset:  320 Size:    64 [unused]
//   float3 gEyePosWS;                  // Offset:  384 Size:    12
//   float cbPerObjectPad1;             // Offset:  396 Size:     4 [unused]
//   float2 gRenderTargetSize;          // Offset:  400 Size:     8 [unused]
//   float2 gInvRenderTargetSize;       // Offset:  408 Size:     8 [unused]
//   float gNearZ;                      // Offset:  416 Size:     4 [unused]
//   float gFarZ;                       // Offset:  420 Size:     4 [unused]
//   float gTotalTime;                  // Offset:  424 Size:     4 [unused]
//   float gDeltaTime;                  // Offset:  428 Size:     4 [unused]
//   float4 gAmbientLight;              // Offset:  432 Size:    16
//   
//   struct Light
//   {
//       
//       float3 Strength;               // Offset:  448
//       float FalloffStart;            // Offset:  460
//       float3 Direction;              // Offset:  464
//       float FalloffEnd;              // Offset:  476
//       float3 Position;               // Offset:  480
//       float SpotPower;               // Offset:  492
//
//   } gLights[16];                     // Offset:  448 Size:   768
//   float4x4 gShadowView;              // Offset: 1216 Size:    64 [unused]
//   float gMaxBorderPadding;           // Offset: 1280 Size:     4 [unused]
//   float gMinBorderPadding;           // Offset: 1284 Size:     4 [unused]
//   float gCascadeBlendArea;           // Offset: 1288 Size:     4 [unused]
//   float cbPerObjectPad0;             // Offset: 1292 Size:     4 [unused]
//   float4 gShadowBias;                // Offset: 1296 Size:    16
//   float4 gShadowTexScale[3];         // Offset: 1312 Size:    48
//   float4 gShadowTexOffset[3];        // Offset: 1360 Size:    48
//   int gPCFBlurForLoopStart;          // Offset: 1408 Size:     4
//   int gPCFBlurForLoopEnd;            // Offset: 1412 Size:     4
//   int cbPerObjectPad2;               // Offset: 1416 Size:     4 [unused]
//   int cbPerObjectPad3;               // Offset: 1420 Size:     4 [unused]
//   bool gVisualCascade;               // Offset: 1424 Size:     4
//   bool gBlendCascade;                // Offset: 1428 Size:     4 [unused]
//   bool cbPerObjectPad5;              // Offset: 1432 Size:     4 [unused]
//   bool cbPerObjectPad6;              // Offset: 1436 Size:     4 [unused]
//   float4 gCascadeFrustumsEyeSpaceDepthsFloat;// Offset: 1440 Size:    16
//   float4 gCascadeFrustumsEyeSpaceDepthsFloat4[3];// Offset: 1456 Size:    48 [unused]
//
// }
//
// Resource bind info for gMaterialData
// {
//
//   struct MaterialData
//   {
//       
//       float4 DiffuseAlbedo;          // Offset:    0
//       float4 CubeMapDiffuseAlbedo;   // Offset:   16
//       float3 FresnelR0;              // Offset:   32
//       float Roughness;               // Offset:   44
//       float4x4 MatTransform;         // Offset:   48
//       uint DiffuseMapIndex;          // Offset:  112
//       uint NormalMapIndex;           // Offset:  116
//       uint HeightMapIndex;           // Offset:  120
//       int BitangentSign;             // Offset:  124
//       uint UseACForPOM;              // Offset:  128
//       uint MaxSampleCount;           // Offset:  132
//       uint MinSampleCount;           // Offset:  136
//       uint CascadeDebugIndex;        // Offset:  140
//       float HeightScale;             // Offset:  144
//       float ShadowSoftening;         // Offset:  148
//       float floatPad0;               // Offset:  152
//       float floatPad1;               // Offset:  156
//       bool ShowSelfShadow;           // Offset:  160
//       bool boolPad0;                 // Offset:  164
//       bool boolPad1;                 // Offset:  168
//       bool boolPad2;                 // Offset:  172
//
//   } $Element;                        // Offset:    0 Size:   176
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      ID      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- ------- -------------- ------
// gsamLinearWrap                    sampler      NA          NA      S0             s2      1 
// gsamAnisotropicWrap               sampler      NA          NA      S1             s4      1 
// gsamShadow                      sampler_c      NA          NA      S2             s6      1 
// gCubeMap                          texture  float4        cube      T0             t0      1 
// gTextureMaps                      texture  float4          2d      T1             t1     44 
// gShadowMap                        texture  float4          2d      T2      t0,space1      3 
// gMaterialData                     texture  struct         r/o      T3      t0,space2      1 
// cbPerObject                       cbuffer      NA          NA     CB0            cb0      1 
// cbPass                            cbuffer      NA          NA     CB1            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyz         1     NONE   float   xyz 
// POSITION                 1   xyzw        2     NONE   float   xyzw
// NORMAL                   0   xyz         3     NONE   float   xyz 
// TANGENT                  0   xyz         4     NONE   float   xyz 
// TEXCOORD                 0   xy          5     NONE   float   xy  
// TEXCOORD                 1     z         5     NONE   float     z 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_1
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { 1.500000, 0, 0, 1.000000},
                              { 0, 1.500000, 0, 1.000000},
                              { 0, 0, 5.500000, 1.000000},
                              { 1.500000, 0, 5.500000, 1.000000},
                              { 1.500000, 1.500000, 0, 1.000000},
                              { 1.000000, 1.000000, 1.000000, 1.000000},
                              { 0, 1.000000, 5.500000, 1.000000},
                              { 0.500000, 3.500000, 0.750000, 1.000000} }
dcl_constantbuffer CB0[0:0][9], immediateIndexed, space=0
dcl_constantbuffer CB1[1:1][91], dynamicIndexed, space=0
dcl_sampler S0[2:2], mode_default, space=0
dcl_sampler S1[4:4], mode_default, space=0
dcl_sampler S2[6:6], mode_comparison, space=0
dcl_resource_texturecube (float,float,float,float) T0[0:0], space=0
dcl_resource_texture2d (float,float,float,float) T1[1:44], space=0
dcl_resource_texture2d (float,float,float,float) T2[0:2], space=1
dcl_resource_structured T3[0:0], 176, space=2
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xy
dcl_input_ps linear v5.z
dcl_output o0.xyzw
dcl_temps 18
ld_structured r0.xyzw, CB0[0][8].x, l(0), T3[0].xyzw
ld_structured r1.xyzw, CB0[0][8].x, l(16), T3[0].xyzw
ld_structured r2.xyzw, CB0[0][8].x, l(32), T3[0].xyzw
ld_structured r3.xyzw, CB0[0][8].x, l(112), T3[0].xyzw
ld_structured r4.xyz, CB0[0][8].x, l(128), T3[0].xyzx
ld_structured r5.xy, CB0[0][8].x, l(144), T3[0].xyxx
ld_structured r4.w, CB0[0][8].x, l(160), T3[0].xxxx
dp3 r5.z, v3.xyzx, v3.xyzx
rsq r5.z, r5.z
mul r6.xyz, r5.zzzz, v3.xyzx
add r7.xyz, -v1.xyzx, CB1[1][24].xyzx
dp3 r5.z, r7.xyzx, r7.xyzx
rsq r5.z, r5.z
mul r8.xyz, r5.zzzz, r7.xyzx
dp3 r5.w, v4.xyzx, r6.xyzx
mad r9.xyz, -r5.wwww, r6.xyzx, v4.xyzx
dp3 r5.w, r9.xyzx, r9.xyzx
rsq r5.w, r5.w
mul r9.xyz, r5.wwww, r9.xyzx
mul r10.xyz, r6.zxyz, r9.yzxy
mad r10.xyz, r6.yzxy, r9.zxyz, -r10.xyzx
itof r5.w, -r3.w
mul r11.xyz, r5.wwww, -r10.xyzx
dp3 r12.x, -r8.xyzx, r9.xyzx
dp3 r12.y, -r8.xyzx, r11.xyzx
dp3 r5.w, -r8.xyzx, r6.xyzx
mul r12.xy, r5.xxxx, -r12.xyxx
div r12.xy, r12.xyxx, r5.wwww
itof r13.xyz, r4.yzxy
dp3 r4.y, r8.xyzx, r6.xyzx
add r4.z, -r13.x, r13.y
mad r4.y, r4.y, r4.z, r13.x
ftoi r5.w, r4.y
round_z r4.y, r4.y
div r4.y, l(1.000000, 1.000000, 1.000000, 1.000000), r4.y
mul r12.zw, r4.yyyy, r12.xxxy
deriv_rtx_coarse r13.yw, v5.xxxy
deriv_rty_coarse r14.xy, v5.xyxx
add r6.w, -r4.y, l(1.000000)
iadd r5.w, r5.w, l(1)
iadd r4.x, -r4.x, l(1)
itof r4.x, r4.x
mov r14.zw, l(0,0,0,0)
mov r15.xyzw, l(0,0,0,0)
mov r7.w, l(0)
mov r8.w, r6.w
mov r9.w, l(1.000000)
mov r10.w, l(0)
loop 
  ige r11.w, r7.w, r5.w
  breakc_nz r11.w
  add r16.xy, r14.zwzz, v5.xyxx
  sample_d r16.xy, r16.xyxx, T1[r3.z + 1].xwyz, S1[4], r13.ywyy, r14.xyxx
  mul r11.w, r4.x, r16.x
  mad r11.w, r13.z, r16.y, r11.w
  lt r16.x, r8.w, r11.w
  if_nz r16.x
    add r16.x, -r9.w, r10.w
    add r16.y, r10.w, -r11.w
    add r16.y, r8.w, r16.y
    add r16.y, -r9.w, r16.y
    div r16.x, r16.x, r16.y
    mad r15.zw, r16.xxxx, r12.zzzw, r15.xxxy
    mov r7.w, r5.w
  else 
    iadd r7.w, r7.w, l(1)
    mad r16.xy, r12.xyxx, r4.yyyy, r14.zwzz
    add r16.z, -r4.y, r8.w
    mov r15.xy, r14.zwzz
    mov r9.w, r8.w
    mov r10.w, r11.w
    mov r14.zw, r16.xxxy
    mov r8.w, r16.z
  endif 
endloop 
add r12.xy, r15.zwzz, v5.xyxx
sample r14.xyz, r12.xyxx, T1[r3.y + 1].xyzw, S1[4]
mad r14.xyz, r14.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
itof r3.y, r3.w
mul r10.xyz, r3.yyyy, -r10.xyzx
mul r10.xyz, r10.xyzx, r14.yyyy
mad r10.xyz, r14.xxxx, r9.xyzx, r10.xyzx
mad r10.xyz, r14.zzzz, r6.xyzx, r10.xyzx
sample r14.xyzw, r12.xyxx, T1[r3.x + 1].xyzw, S1[4]
mul r14.xyzw, r1.xyzw, r14.xyzw
mul r16.xyzw, r0.xyzw, r14.xyzw
add r17.xyzw, -r2.wxyz, l(1.000000, 1.000000, 1.000000, 1.000000)
max r0.w, r17.x, l(0.010000)
if_nz r4.w
  dp3 r1.w, -CB1[1][29].xyzx, -CB1[1][29].xyzx
  rsq r1.w, r1.w
  mul r3.xyw, r1.wwww, -CB1[1][29].xyxz
  dp3 r9.x, r3.xywx, r9.xyzx
  dp3 r9.y, r3.xywx, r11.xyzx
  dp3 r1.w, r3.xywx, r6.xyzx
  mad r2.w, r1.w, r4.z, r13.x
  ftoi r3.x, r2.w
  mul r3.yw, r5.xxxx, r9.xxxy
  div r3.yw, r3.yyyw, r1.wwww
  sample r4.yz, r12.xyxx, T1[r3.z + 1].yxwz, S1[4]
  mul r1.w, r4.y, r4.x
  mad r1.w, r13.z, r4.z, r1.w
  add r4.w, -r1.w, l(1.000000)
  round_z r2.w, r2.w
  div r2.w, r4.w, r2.w
  add r4.w, r1.w, r2.w
  mul r5.xw, r2.wwww, r3.yyyw
  deriv_rtx_coarse r6.xy, r12.xyxx
  deriv_rty_coarse r6.zw, r12.xxxy
  iadd r3.x, r3.x, l(1)
  mov r9.xy, r5.xwxx
  mov r9.zw, l(0,0,0,0)
  mov r11.xy, r15.zwzz
  mov r7.w, l(0)
  mov r8.w, r4.w
  mov r10.w, r1.w
  mov r11.z, r1.w
  mov r11.w, l(0)
  loop 
    ige r12.z, r7.w, r3.x
    breakc_nz r12.z
    add r12.zw, r9.xxxy, r12.xxxy
    sample_d r12.z, r12.zwzz, T1[r3.z + 1].yzxw, S1[4], r6.xyxx, r6.zwzz
    lt r12.w, r8.w, r12.z
    if_nz r12.w
      add r12.w, -r10.w, r11.z
      add r13.x, r11.z, -r12.z
      add r13.x, r8.w, r13.x
      add r13.x, -r10.w, r13.x
      div r12.w, r12.w, r13.x
      mad r11.xy, r12.wwww, r5.xwxx, r9.zwzz
      mov r7.w, r3.x
      mov r11.w, l(-1)
    else 
      iadd r7.w, r7.w, l(1)
      mad r13.xy, r3.ywyy, r2.wwww, r9.xyxx
      add r12.w, r2.w, r8.w
      mov r9.zw, r9.xxxy
      mov r10.w, r8.w
      mov r11.z, r12.z
      mov r9.xy, r13.xyxx
      mov r8.w, r12.w
    endif 
  endloop 
  if_nz r11.w
    add r3.xy, r11.xyxx, r12.xyxx
    sample r3.xy, r3.xyxx, T1[r3.z + 1].xwyz, S1[4]
    add r3.xy, -r4.yzyy, r3.xyxx
    mul r1.w, r3.x, r4.x
    mad r1.w, r13.z, r3.y, r1.w
    add r1.w, -r1.w, l(1.000000)
    mad r2.w, -r5.y, l(0.500000), l(1.000000)
    mul_sat r2.w, r1.w, r2.w
    mul_sat r1.w, r5.y, r1.w
    add r1.w, -r1.w, l(1.000000)
    mul r1.w, r1.w, r4.x
    mad r1.w, r13.z, r2.w, r1.w
  else 
    mov r1.w, l(1.000000)
  endif 
else 
  mov r1.w, l(1.000000)
endif 
iadd r2.w, -CB1[1][88].x, CB1[1][88].y
itof r2.w, r2.w
mul r2.w, r2.w, r2.w
lt r3.xyz, CB1[1][90].xyzx, v5.zzzz
and r3.xyz, r3.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
dp3 r3.x, l(1.000000, 1.000000, 1.000000, 0.000000), r3.xyzx
min r3.x, r3.x, l(2.000000)
ftoi r3.x, r3.x
mad r4.xyzw, v2.xyzw, CB1[1][r3.x + 82].xyzw, CB1[1][r3.x + 85].xyzw
div r3.yzw, r4.xxyz, r4.wwww
resinfo_uint r4.xy, l(0), T2[r3.x + 0].xyzw
utof r4.xy, r4.xyxx
div r4.xy, l(1.000000, 1.000000, 1.000000, 1.000000), r4.xyxx
mov r4.z, l(0)
mov r4.w, CB1[1][88].x
loop 
  ige r5.x, r4.w, CB1[1][88].y
  breakc_nz r5.x
  itof r5.x, r4.w
  mad r5.y, r5.x, r4.y, r3.z
  mov r5.w, r4.z
  mov r6.x, CB1[1][88].x
  loop 
    ige r6.y, r6.x, CB1[1][88].y
    breakc_nz r6.y
    dp3 r6.y, CB1[1][81].xyzx, icb[r3.x + 0].xyzx
    add r6.y, r3.w, -r6.y
    itof r6.z, r6.x
    mad r5.x, r6.z, r4.x, r3.y
    sample_c_lz r5.x, r5.xyxx, T2[r3.x + 0].xxxx, S2[6], r6.y
    add r5.w, r5.x, r5.w
    iadd r6.x, r6.x, l(1)
  endloop 
  mov r4.z, r5.w
  iadd r4.w, r4.w, l(1)
endloop 
div r2.w, r4.z, r2.w
mul r1.w, r1.w, r2.w
if_nz CB1[1][89].x
  mov r3.xyz, icb[r3.x + 4].xyzx
else 
  mov r3.xyz, l(1.000000,1.000000,1.000000,0)
endif 
dp3 r2.w, -CB1[1][29].xyzx, -CB1[1][29].xyzx
rsq r2.w, r2.w
mul r4.xyz, r2.wwww, -CB1[1][29].xyzx
dp3 r2.w, r4.xyzx, r10.xyzx
max r2.w, r2.w, l(0.000000)
mul r5.xyw, r2.wwww, CB1[1][28].xyxz
mul r2.w, r0.w, l(256.000000)
mad r6.xyz, r7.xyzx, r5.zzzz, r4.xyzx
dp3 r3.w, r6.xyzx, r6.xyzx
rsq r3.w, r3.w
mul r6.xyz, r3.wwww, r6.xyzx
mad r3.w, r0.w, l(256.000000), l(8.000000)
dp3 r4.w, r6.xyzx, r10.xyzx
max r4.w, r4.w, l(0.000000)
log r4.w, r4.w
mul r2.w, r2.w, r4.w
exp r2.w, r2.w
mul r2.w, r2.w, r3.w
mul r2.w, r2.w, l(0.125000)
dp3_sat r3.w, r6.xyzx, r4.xyzx
add r3.w, -r3.w, l(1.000000)
mul r4.x, r3.w, r3.w
mul r4.x, r4.x, r4.x
mul r3.w, r3.w, r4.x
mad r4.xyz, r17.yzwy, r3.wwww, r2.xyzx
mul r6.xyz, r2.wwww, r4.xyzx
mad r4.xyz, r4.xyzx, r2.wwww, l(1.000000, 1.000000, 1.000000, 0.000000)
div r4.xyz, r6.xyzx, r4.xyzx
mad r0.xyz, r0.xyzx, r14.xyzx, r4.xyzx
mul r0.xyz, r5.xywx, r0.xyzx
mul r0.xyz, r0.xyzx, r1.wwww
mad r0.xyz, CB1[1][27].xyzx, r16.xyzx, r0.xyzx
dp3 r1.w, -r8.xyzx, r10.xyzx
add r1.w, r1.w, r1.w
mad r4.xyz, r10.xyzx, -r1.wwww, -r8.xyzx
sample r5.xyz, r4.xyzx, T0[0].xyzw, S0[2]
mul r1.xyz, r1.xyzx, r5.xyzx
dp3_sat r1.w, r10.xyzx, r4.xyzx
add r1.w, -r1.w, l(1.000000)
mul r2.w, r1.w, r1.w
mul r2.w, r2.w, r2.w
mul r1.w, r1.w, r2.w
mad r2.xyz, r17.yzwy, r1.wwww, r2.xyzx
mul r2.xyz, r0.wwww, r2.xyzx
mad r0.xyz, r2.xyzx, r1.xyzx, r0.xyzx
mul o0.xyz, r3.xyzx, r0.xyzx
mov o0.w, r16.w
ret 
// Approximately 254 instruction slots used
